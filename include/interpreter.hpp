#ifndef __INTERPRETER_HPP__
#define __INTERPRETER_HPP__

#include "lexer.hpp"
#include "memory.hpp"

#include <vector>
#include <string>

class Interpreter {
    public:
        /**
         * @brief Constructor
         *
         * Constructor for the interpreter.
         * @param source Source code to interpret
         */
        Interpreter(const char* source);

        /**
         * @brief Constructor
         *
         * Constructor for the interpreter.
         * @param source Source code to interpret
         */
        Interpreter(const string& source) : Interpreter(source.c_str()) {}

        /**
         * @brief Run the interpreter
         *
         * Run the interpreter. It takes the tokens generated by the lexer and
         * interprets them. In case of an error, the function throws an exception
         * containing the error message.
         */
        void run();

    private:
        size_t curr_tk = 0;
        vector<Token> tokens;
        Memory memory;

        /**
         * @brief Import a module
         *
         * Import a module into the current source code. The function reads the
         * module file, generates the tokens, checks for errors and inserts the
         * token list.
         * @param module_path Path to the module file
         */
        void import_module(const string& module_path);

        /**
         * @brief Handle a keyword
         *
         * Handle a keyword. The function is called when the interpreter finds a
         * keyword in the source code. It checks the keyword and executes the
         * corresponding action.
         * @param keyword Keyword to handle
         */
        void handle_keyword(const string& keyword);
};

#endif
